---
title: |
  Software Gardening Almanac
subtitle: Research in Progress
format:
  revealjs: 
    theme: simple
    transition: slide
    slide-number: true
    auto-stretch: false
    width: 1050
    height: 800
    margin: 0.01
---

## Content Outline

- Intro slide

- Background, BSSw Fellowship

- Problem: code works for now but not for long
  - Sub problem: how much time do we lose to decay, repeated challenges, and seasonal change in the context of time?
  - How does code change over time?
  - Show git-of-theseus for something common like Pandas
  - "garden-of-theseus": maintenance over time is implied if we're going to continue using something!

- One solution: Software Gardening
- Software gardening article surface: https://bssw.io/blog_posts/long-term-software-gardening-strategies-for-cultivating-scientific-development-ecosystems

- Why a blog article isn't enough (it too faces the dynamics of time and decay)

- Background, Almanacs and their purpose https://en.wikipedia.org/wiki/Almanac

- The handbook:
- A living community practicing software gardening to maintain practices
  - Planning for scale with common open source and inclusive documents
  - Providing a referenceable index of codes as "biomarkers" of patterns: https://pylint.readthedocs.io/en/latest/user_guide/messages/messages_overview.html

- A concept for each observation: relative "project git epoch's" starting from their initial commit. Using this we can measure the changes in the repository alongside the dynamics of time.

- People: Software gardener lattices; growing, supporting, and synergizing software gardeners
  - One applied chapter: growing open source; when is it apt to add a new maintainer?
    - SDA-P0001: "It's dangerous to go alone...": A lack of contributor diversity can lead to low growth and disaster in the longterm for a project.
      - Observation:
        - Project has under 1 unique contributor for every 30,000 lines of code
        - Warning: Grace period of 1 month after initial commit
        - Exception: After 1 month
      - Fix: Introduce the project to more people
        - Add a contributors.md document to the repository
        - Consider inviting others to work with you
          - Are there volunteer contributors who have shown interest and would benefit from increased roles?
        - Consider keeping the number of contributors >= 3 to retain diversity and resolve "ties"
  - Other ideas:
    - Repositories with no PR reviews or PR reviews with no reviews / only reviews from the contributor

- Code: software gardening senescence; how and why code changes with time
  - One applied chapter: unhealthy ecosystem in place for projects
    - SDA-C0001: no environment management for project detected
      - Observation: detect setup.py, pyproject.toml, renv.lock, environment.yml, etc.
      - Fix: Add environment management files related to the project language
  - Other ideas:
    - Detecting repositories which have no testing frameworks installed.

- Season: Software archeology, nowness, and proactivity; past, present, future, what patterns do we see
  - One applied chapter: seasonal climate checks
  - SDA-S0001: Disintegrated garden chronology - no automated seasonal checks for repository will lead to accelerated decay
    - Observation: detect automated checks which occur at a regular rate in order to ensure the project stays up to date with wider environment.
    - Fix: Add, for example GitHub Actions workflow which runs at chronological schedule (once weekly, for example) to install build of project and run tests.
  - Other ideas:
    - Projects where documentation is never updated.
    - 


------------------------------------------------------------------------

## Presentation Outline

<br>
<br>
<br>

1.  ‚úçÔ∏è Publishing
1. üì¶ Python Packaging
1. üõ†Ô∏è Packaging Understanding, Trust, and Connection


------------------------------------------------------------------------

## Thank you

<br>
<br>
<br>
<br>
<br>
Thank you! Questions / comments?

