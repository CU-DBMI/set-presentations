---
title: |
  Packaging as Publishing
subtitle: Python Code Formalizations
format:
  revealjs: 
    theme: simple
    transition: slide
    slide-number: true
    auto-stretch: false
    width: 1050
    height: 800
    margin: 0.01
---

## Presentation Outline

<br>
<br>
<br>

1.  ✍️ Publishing
1. 📦 Python Packaging
1. 🛠️ Packaging Understanding, Trust, and Connection

------------------------------------------------------------------------

## Why?

<br>

Why does this matter?

> Following publishing conventions increases:
>
> - Understanding
> - Trust
> - Reach (connection)

------------------------------------------------------------------------

## Why?

<br>

__🤷‍♂️ "I'm not convinced. My work is only for _[ internal | quick | throwaway ]_ use so packaging / publishing for others doesn't matter."__ 

- <span style="font-size:.8em">Good packaging practices work just as well for [inner source](https://en.wikipedia.org/wiki/Inner_source) collaboration (private or proprietary development within organizations).</span>
- <span style="font-size:.8em">It also __increases your development velocity__ through reduced time necessary to understand and implement the code (or reuse it in the future)!</span>
- <span style="font-size:.8em">Internal practice can be a great way to ready yourself for the needs of publicly available open source software maintainence.</span>


------------------------------------------------------------------------

## Why?

<br>

__🤷 "I'd rather use a bespoke method of packaging my work. It's not my responsibility to help others understand my customizations."__

- Avoiding common practice and understanding weakens one of our collective superpowers: collaboration.
- How much time will you or others spend on packaging vs providing human impact from the work?

------------------------------------------------------------------------

## Publishing - Text vs Book

<br>

![](assets/2023-08-31-09-08-45.png)

How are these two different?

------------------------------------------------------------------------

## Publishing - Understanding

![](assets/2023-08-31-09-14-46.png)

- Unsurprising formatting for __understanding__ (sections, cadence, spelling, etc.)

------------------------------------------------------------------------

## Publishing - Trust

![](assets/2023-08-31-15-37-35.png)

- Sense of __trust__ from familiarity, connection, and authority (location, review, or style)

------------------------------------------------------------------------

## Publishing - Connection

![](assets/2023-08-31-15-39-30.png)

- __Connection__ to a wider audience (citations, maintainability, reproducibility)

------------------------------------------------------------------------

## Publishing - Code as Language

<br> 

Code is another kind of written language.

<br> 

Ignoring language conventions can often result in poor grammar, or __[_code smell_](https://en.wikipedia.org/wiki/Code_smell)__.

<br>

Code smells are indications that something might be going wrong. They generally reduce the understanding, trust, and connection for your code.


------------------------------------------------------------------------

## Publishing - Code as Language

![](assets/2023-08-31-09-22-54.png)

Who are you writing for? Do they understand, trust, and connect with your code?

------------------------------------------------------------------------

## Publishing - Python

![](assets/2023-08-31-09-32-42.png)

__"Packaging"__ is the craft of preparing for and reaching distribution of your Python work.

------------------------------------------------------------------------

## Publishing - Python

<br>
<br>
<br>
<br>
<br>
This presentation will focus on <ins>__preparations__</ins> for distribution.

------------------------------------------------------------------------

## Publishing - Python
![](assets/2023-08-31-09-53-12.png)

<span style="font-size:.8em">Python packaging is a practice which requires adjustment based on intention (there's no one-size fits all forever solution here).</span>

- <span style="font-size:.8em">For example: we'd package Python code differently for a patient bedside medical device use vs a freeware desktop videogame.</span>

------------------------------------------------------------------------

## Python Packaging - Definitions

<br>

```text
my_package/
│   __init__.py
│   module_a.py
│   module_b.py
```
<br>

- A Python __package__ is a collection of modules (`.py` files) that usually include an "initialization file" `__init__.py`.

------------------------------------------------------------------------

## Python Packaging - Definitions

![](assets/2023-08-31-09-54-47.png)

- Python ___"packaging"___ is a broader term indicating formalization of
code with publishing intent.

------------------------------------------------------------------------

## Python Packaging - Definitions

<br>

<center>![](assets/2023-08-31-09-55-13.png)</center>

- Python packages are commonly installed from __PyPI__ (Python Package Index, [https://pypi.org](https://pypi.org)).

> For example: `pip install pandas` references PyPI by default to install for the `pandas` package.

------------------------------------------------------------------------

## Python Packaging - Understanding

```bash
project_directory
├── README.md
├── LICENSE.txt
├── pyproject.toml
├── docs
│   └── source
│       └── index.md
├── src
│   └── package_name
│       └── __init__.py
│       └── module_a.py
└── tests
    └── __init__.py
    └── test_module_a.py
```
 
Python Packaging today generally assumes a specific directory design.
Following this convention generally improves the __understanding__ of your code.

------------------------------------------------------------------------

## Python Packaging - README.md

<br>

```bash
project_directory
├── README.md # used for documentation
...
```
<br>

The __`README.md`__ file is a [markdown](https://en.wikipedia.org/wiki/Markdown) file with documentation including project goals
and other short notes about installation, development, or usage.

- The `README.md` file is akin to a book jacket blurb which quickly tells the audience
what the book will be about.

------------------------------------------------------------------------

## Python Packaging - LICENSE.txt

<br>

```bash
project_directory
├── README.md
├── LICENSE.txt # indicates usage persmissions and protections
...
```
<br>

The __`LICENSE.txt`__ file is a text file which indicates licensing details for the project.
It often includes information about how it may be used and
protects the authors in disputes.

- The `LICENSE.txt` file can be thought of like a book's copyright page.
- See [https://choosealicense.com/](https://choosealicense.com/) for more details on selecting an open source license.

------------------------------------------------------------------------

## Python Packaging - pyproject.toml

<br>

```bash
project_directory
├── README.md
├── LICENSE.txt 
├── pyproject.toml # outlines the project organization (and much more)
...
```
<br>

The __`pyproject.toml`__ file is a Python-specific [TOML](https://en.wikipedia.org/wiki/TOML) file 
which helps organize how the project is used and built for wider distribution. More here later!

- The `pyproject.toml` file is similar to a book's table of contents, index, and printing or production specification.


------------------------------------------------------------------------

## Python Packaging - Docs Dir

<br>

```bash
project_directory
│...
├── docs # directory for in-depth documentation and docs build code
│   └── source
│       └── index.md
...
```

<br>

<span style="font-size:.8em">The __`docs`__ directory is used for in-depth documentation and related documentation build code (for example, when building documentation websites, aka "docsites").</span>

- <span style="font-size:.8em">The `docs` directory includes information similar to a book's "study guide", providing content surrounding how to best make use of and understand the content found within.</span>

------------------------------------------------------------------------

## Python Packaging - Source Code Dir

<br>

```bash
project_directory
│...
├── src # isolates source code for use in project
│   └── package_name
│       └── __init__.py
│       └── module_a.py
...
```

<br>

<span style="font-size:.8em">
The __`src`__ directory includes primary source code for use in the project. Python projects
generally use a nested package directory with modules and sub-packages.
</span>

- <span style="font-size:.8em">The `src` directory is like a book's body or general content 
(perhaps thinking of modules as chapters or sections of related ideas).</span>


------------------------------------------------------------------------

## Python Packaging - Test Code Dir

<br>

```bash
project_directory
│...
├── src
│   └── package_name
│       └── __init__.py
│       └── module_a.py
│ 
└── tests # organizes the validation of source code
    └── __init__.py
    └── test_module_a.py
```



<span style="font-size:.8em">
The __`tests`__ directory includes testing code for validating functionality 
of code found in the `src` directory. The above follows [pytest](https://docs.pytest.org/) conventions.
</span>

- <span style="font-size:.8em">The `tests` directory is for code which acts like a book's early reviewers or editors, 
making sure that if you change things in `src` the impacts remain as expected.</span>

------------------------------------------------------------------------

## Python Packaging - Examples in the wild

<br>

The described Python directory structure can be witnessed in the wild from the following resources:

- [`pypa/sampleproject`](https://github.com/pypa/sampleproject)
- [`microsoft/python-package-template`](https://github.com/microsoft/python-package-template)
- [`scientific-python/cookie`](https://github.com/scientific-python/cookie)
- ... and so many more!

------------------------------------------------------------------------

## Python Packaging - Trust

![](assets/2023-08-31-11-50-00.png)

Building an understandable body of content helps tremendously with audience trust.

- What else can we do to enhance project trust?

------------------------------------------------------------------------

## Python Packaging - Be authentic

![](assets/2023-08-31-11-59-31.png)

Be authentic! Fill out your profile to help your audience know the author and why you do what you do. See here for [GitHub's documentation on filling out your profile](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/about-your-profile).

- Add a profile picture of yourself or something fun.
- Make it customized and unique to you!

------------------------------------------------------------------------

## Python Packaging - Python versions
<br> 

![](assets/2023-08-31-12-21-45.png)

Use Python versions which are supported (this changes over time).
Python versions which are end-of-life may be difficult to support and are a sign of [code decay](https://en.wikipedia.org/wiki/Software_rot) for projects.

- See here for [updated information on Python version status](https://devguide.python.org/versions/).

------------------------------------------------------------------------

## Python Packaging - Security linters

![](assets/2023-08-31-12-41-49.png)

<span style="font-size:.8em">Use security vulnerability linters to help prevent undesirable or risky processing for your audience.
Doing this both practical to avoid issues and conveys that you care about those using your package!</span>


- <span style="font-size:.8em">[PyCQA/bandit](https://github.com/PyCQA/bandit): checks Python code</span>
- <span style="font-size:.8em">[pyupio/safety](https://github.com/pyupio/safety): checks Python dependencies</span>
- <span style="font-size:.8em">[gitleaks](https://github.com/gitleaks/gitleaks): checks for sensitive passwords, keys, or tokens</span>

------------------------------------------------------------------------

## Python Packaging - GitHub Actions

![](assets/2023-08-31-12-53-33.png)

<span style="font-size:.8em">Combining GitHub actions with security linters and tests from your software validation suite can add an observable ✅ for your project.
This provides the audience with a sense that you're transparently testing and sharing results of those tests.</span>

- <span style="font-size:.8em">See [GitHub's documentation on this topic for more information](https://docs.github.com/en/actions).</span>
- <span style="font-size:.8em">See also [DBMI SET's blog post on "Automate Software Workflows with Github Actions"](https://cu-dbmi.github.io/set-website/2023/03/15/Automate-Software-Workflows-with-Github-Actions.html)</span>


------------------------------------------------------------------------

## Python Packaging - Connection

![](assets/2023-08-31-13-02-48.png)

Understandability and trust set the stage for your project's __connection__ to other people and projects.

- What can we do to facilitate connection with our project? 


------------------------------------------------------------------------

## Python Packaging - CITATION.cff

<center>![](assets/2023-08-31-13-04-18.png)</center>
<span style="font-size:.8em">Add a __`CITATION.cff`__ file to your project root in order to describe project relationships and acknowledgements in a standardized way. The [CFF format](https://citation-file-format.github.io/) is also [GitHub compatible](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files), making it easier to cite your project.</span>

- <span style="font-size:.8em">This is similar to a book's credits, acknowledgements, dedication, and author information sections.</span>
- <span style="font-size:.8em">See here for a [`CITATION.cff` file generator (and updater)](https://citation-file-format.github.io/cff-initializer-javascript/#/).</span>


------------------------------------------------------------------------

## Python Packaging - CONTRIBUTING.md

<center>![](assets/2023-08-31-13-34-16.png)</center>

<span style="font-size:.8em">Provide a __`CONTRIBUTING.md`__ file to your project root so as to make clear support details, development guidance, code of conduct, and overall documentation surrounding how the project is governed.</span>

- <span style="font-size:.8em">See GitHub's documentation on ["Setting guidelines for repository contributors"](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors)</span>
- <span style="font-size:.8em">See opensource.guide's section on ["Writing your contributing guidelines"](https://opensource.guide/starting-a-project/#writing-your-contributing-guidelines)</span>

------------------------------------------------------------------------

## Python Packaging - Reproducibility

![](assets/2023-09-01-08-00-15.png)

<span style="font-size:.8em">Code without an environment specification is difficult to run in a consistent way.
This can lead to "works on my machine" scenarios where different things happen for different people, reducing the chance that people can connect with your code.</span>

------------------------------------------------------------------------

## Python Packaging - Environments

![](assets/2023-08-31-13-59-31.png)

<span style="font-size:.8em">Use __Python environment and packaging managers__ to help unify how developers use or maintain your project.
These tools commonly extend `pyproject.toml` files to declare environment and packaging metadata.</span>

- <span style="font-size:.8em">Environment/dependency management facilitate how code is ___processed___.</span>
- <span style="font-size:.8em">Packaging management facilitates how code is ___built___ for distribution.</span>

------------------------------------------------------------------------

## Python Packaging - Brief history

<br>

__"But why do we have to switch the way we do things?"__

_We've always been switching approaches!_ A brief history of Python environment and packaging tooling:

1. __`distutils`, `easy_install` + `setup.py`__ <br>(primarily used during 1990's - early 2000's)
1. __`pip`, `setup.py` + `requirements.txt`__ <br>(primarily used during late 2000's - early 2010's)
1. __`poetry` + `pyproject.toml`__ <br>(began use around late 2010's - ongoing)

------------------------------------------------------------------------

## Python Packaging - Poetry
<br>
<center>![](assets/2023-09-01-08-13-13.png)</center>
<br>

[Poetry](https://github.com/python-poetry/poetry) is one Pythonic environment and packaging manager which can help increase reproducibility using `pyproject.toml` files.

- It's one of many other alternatives such as [`hatch`](https://hatch.pypa.io/latest/) and [`pipenv`](https://pipenv.pypa.io/en/latest/).

------------------------------------------------------------------------

## Python Packaging - Poetry

<br>

```bash
user@machine % poetry new --name=package_name --src .
Created package package_name in .

user@machine % tree .
.
├── README.md
├── pyproject.toml
├── src
│   └── package_name
│       └── __init__.py
└── tests
    └── __init__.py
```

<br>

After installation, Poetry gives us the ability to initialize a directory structure similar to what we presented earlier by using the `poetry new ...` command.

------------------------------------------------------------------------

## Python Packaging - Poetry

<br>

```toml
# pyproject.toml
[tool.poetry]
name = "package-name"
version = "0.1.0"
description = ""
authors = ["username <email@address>"]
readme = "README.md"
packages = [{include = "package_name", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
```

Using this command also initializes the content of our `pyproject.toml` file with opinionated details.

------------------------------------------------------------------------

## Python Packaging - Poetry

```bash
user@machine % poetry add pandas

Creating virtualenv package-name-1STl06GY-py3.9 in /pypoetry/virtualenvs
Using version ^2.1.0 for pandas

...

Writing lock file
```

We can add dependencies directly using the `poetry add ...` command.

- A local virtual environment is managed for us automatically.
- A `poetry.lock` file is written when the dependencies are installed to help ensure the version you installed today will be what's used on other machines.

------------------------------------------------------------------------

## Python Packaging - Poetry

<br>

```bash
% poetry run python -c "import pandas; print(pandas.__version__)"

2.1.0

```

<br>

We can invoke the virtual environment directly using `poetry run ...`.

- This allows us to quickly run code through the context of the project's environment.
- Poetry can automatically switch between multiple environments based on the local directory structure.

------------------------------------------------------------------------

## Python Packaging - Poetry

<br>

```bash
% poetry build

Building package-name (0.1.0)
  - Building sdist
  - Built package_name-0.1.0.tar.gz
  - Building wheel
  - Built package_name-0.1.0-py3-none-any.whl

```

<br>

Poetry readies source-code and pre-compiled versions of our code for distribution platforms like PyPI by using the `poetry build ...` command.

<br>

------------------------------------------------------------------------

## Python Packaging - Distribution

<br>

```bash
% pip install git+https://github.com/project/package_name

```
<br>

Even if we don't reach wider distribution on PyPI or elsewhere, source code managed by `pyproject.toml` and the other techniques mentioned in this presentation can be used for "manual" distribution (with reproducible results).


------------------------------------------------------------------------

## Thank you

<br>
<br>
<br>
<br>
<br>
Thank you! Questions / comments?

