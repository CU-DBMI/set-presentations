---
title: |
  Packaging as Publishing
subtitle: Python Code Formalizations
format:
  revealjs: 
    theme: simple
    transition: slide
    slide-number: true
    auto-stretch: false
---

## Presentation Outline

<br>

1.  ✍️ Publishing
1. 📦 Python Packaging
1. 🧰 Tools

------------------------------------------------------------------------

## Publishing

<br>

Why does this matter?

> Following publishing conventions increases:
>
> - Understanding
> - Trust
> - Reach

------------------------------------------------------------------------

## Publishing - Text vs Book

<br>

![](2023-08-31-09-08-45.png)

How are these two different?

------------------------------------------------------------------------

## Publishing - Understanding

![](2023-08-31-09-14-46.png)

- Unsurprising formatting for __understanding__ (sections, cadence, spelling, etc.)

------------------------------------------------------------------------

## Publishing - Trust

![](2023-08-31-09-16-26.png)

- Sense of __trust__ from familiarity, connection, and authority (location, review, or style)

------------------------------------------------------------------------

## Publishing - Connection

![](2023-08-31-09-19-12.png)

- __Connection__ to a wider audience (citations, domains, cataloging)

------------------------------------------------------------------------

## Publishing - Code as Language

<br> 

Code is another kind of written language.

<br> 

Ignoring language conventions can often result in poor grammar, or __[_code smell_](https://en.wikipedia.org/wiki/Code_smell)__.

<br>

Code smells are indications that something might be going wrong. They generally reduce the understanding, trust, and connection for your code.


------------------------------------------------------------------------

## Publishing - Code as Language

![](2023-08-31-09-22-54.png)

Who are you writing for? Do they understand, trust, and connect with your code?

------------------------------------------------------------------------

## Publishing - Python

![](2023-08-31-09-32-42.png)

Publishing in Python involves the act of __"packaging"__.

------------------------------------------------------------------------

## Publishing - Python
![](2023-08-31-09-53-12.png)

<span style="font-size:.8em">Python packaging is a loose practice which requires adjustment based on intention (there's no one-size fits all forever solution here).</span>

- <span style="font-size:.8em">For example: we'd package Python code differently for a patient bedside medical device use vs a freeware desktop videogame.</span>

------------------------------------------------------------------------

## Python Packaging - Definitions

<br>

```text
my_package/
│   __init__.py
│   module_a.py
│   module_b.py
```
<br>

- A Python __package__ is a collection of modules (`.py` files) that usually include an "initialization file" `__init__.py`.

------------------------------------------------------------------------

## Python Packaging - Definitions

![](2023-08-31-09-54-47.png)

- Python ___"packaging"___ is a broader term indicating formalization of
code with publishing intent.

------------------------------------------------------------------------

## Python Packaging - Definitions

<br>

<center>![](2023-08-31-09-55-13.png)</center>

- Python packages are commonly installed from __PyPI__ (Python Package Index, [https://pypi.org](https://pypi.org)).

> For example: `pip install pandas` references PyPI by default to install for the `pandas` package.

------------------------------------------------------------------------

## Python Packaging - Understanding
<br>
```bash
project_directory
├── README.md
├── LICENSE.txt
├── pyproject.toml
├── src
│   └── package_name
│       └── __init__.py
│       └── module_a.py
└── tests
    └── __init__.py
    └── test_module_a.py
```
<br> 
Python Packaging today generally assumes a specific directory design.
Following this convention generally improves the __understanding__ of your code.

------------------------------------------------------------------------

## Python Packaging - README.md

<br>

```bash
project_directory
├── README.md # used for documentation
...
```
<br>

The __`README.md`__ file is a [markdown](https://en.wikipedia.org/wiki/Markdown) file with documentation including project goals
and other short notes about installation, development, or usage.

- The `README.md` file is akin to a book jacket blurb which quickly tells the audience
what the book will be about.

------------------------------------------------------------------------

## Python Packaging - LICENSE.txt

<br>

```bash
project_directory
├── README.md
├── LICENSE.txt # indicates usage persmissions and protections
...
```
<br>

The __`LICENSE.txt`__ file is a text file which indicates licensing details for the project.
It often includes information about how it may be used and
protects the authors in disputes.

- The `LICENSE.txt` file is akin to a book's copyright page.
- See [https://choosealicense.com/](https://choosealicense.com/) for more details on selecting an open source license.

------------------------------------------------------------------------

## Python Packaging - pyproject.toml

<br>

```bash
project_directory
├── README.md
├── LICENSE.txt 
├── pyproject.toml # outlines the project organization (and much more)
...
```
<br>

The __`pyproject.toml`__ file is a Python-specific [TOML](https://en.wikipedia.org/wiki/TOML) file 
which helps organize how the project is used and built for wider distribution. More here later!

- The `pyproject.toml` is akin to a book's table of contents, index, and printing or production specification.

------------------------------------------------------------------------

## Python Packaging - Source Code

```bash
project_directory
├── README.md
├── LICENSE.txt
├── pyproject.toml
├── src # isolates source code for use in project
│   └── package_name
│       └── __init__.py
│       └── module_a.py
...
```

The __`src`__ directory includes primary source code for use in the project. Python projects
generally use a nested package directory with modules and sub-packages.

- The `src` directory is akin to a book's body or general content 
(perhaps thinking of modules as chapters or sections of related ideas).

------------------------------------------------------------------------

<table>
<tr>
<td>

````text

````

</td>
<td>

```text

```

</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
</tr>
</table>

------------------------------------------------------------------------
